{"version":3,"sources":["components/Numbers_button.js","components/Negative_button.js","components/Operators_button.js","components/Clear_button.js","components/Equal_button.js","components/Buttons_container.js","App.js","reportWebVitals.js","store/index.js","index.js","store/calculator-slice.js"],"names":["NumbersButton","props","dispatch","useDispatch","id","className","onClick","inputNumber","value","NegativeButton","negativeOperator","OperatorsButton","addOperator","ClearButton","clearInput","EqualButton","compute","ButtonsContainer","App","inputValue","useSelector","state","cal","input","outputValue","output","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","calReducer","ReactDOM","render","document","getElementById","initialState","numbersSlice","createSlice","name","reducers","action","payload","includes","eval","actions"],"mappings":"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","file":"static/js/main.d77c5215.chunk.js","sourcesContent":["import \"./buttons.css\";\nimport { inputNumber } from \"../store/calculator-slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst NumbersButton = (props) => {\n  const dispatch = useDispatch();\n  return (\n    <button\n      id={props.id}\n      className={`buttons numbers ${props.className}`}\n      onClick={() => dispatch(inputNumber(props.value))}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nexport default NumbersButton;\n","import \"./buttons.css\";\nimport { negativeOperator } from \"../store/calculator-slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst NegativeButton = (props) => {\n  const dispatch = useDispatch();\n\n  return (\n    <button\n      id={props.id}\n      className=\"buttons operands\"\n      onClick={() => dispatch(negativeOperator(props.value))}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nexport default NegativeButton;\n","import \"./buttons.css\";\nimport { addOperator } from \"../store/calculator-slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst OperatorsButton = (props) => {\n  const dispatch = useDispatch();\n\n  return (\n    <button\n      id={props.id}\n      className=\"buttons operands\"\n      onClick={() => dispatch(addOperator(props.value))}\n    >\n      {props.value}\n    </button>\n  );\n};\n\nexport default OperatorsButton;\n","import \"./buttons.css\";\nimport { clearInput } from \"../store/calculator-slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst ClearButton = (props) => {\n  const dispatch = useDispatch();\n\n  const clearHandler = () => {\n    dispatch(clearInput());\n  };\n\n  return (\n    <button id={props.id} className=\"buttons clear\" onClick={clearHandler}>\n      {props.value}\n    </button>\n  );\n};\n\nexport default ClearButton;\n","import \"./buttons.css\";\nimport { compute } from \"../store/calculator-slice\";\nimport { useDispatch } from \"react-redux\";\n\nconst EqualButton = (props) => {\n  const dispatch = useDispatch();\n\n  const computeHandler = () => {\n    dispatch(compute());\n  };\n\n  return (\n    <button id={props.id} className=\"buttons equal\" onClick={computeHandler}>\n      {props.value}\n    </button>\n  );\n};\n\nexport default EqualButton;\n","import \"./buttons_container.css\";\nimport \"./buttons.css\";\nimport NumbersButton from \"./Numbers_button\";\nimport NegativeButton from \"./Negative_button\";\nimport OperatorsButton from \"./Operators_button\";\nimport ClearButton from \"./Clear_button\";\nimport EqualButton from \"./Equal_button\";\n\nconst ButtonsContainer = () => {\n  return (\n    <div className=\"buttons-container\">\n      <NumbersButton id=\"one\" value=\"1\" />\n      <NumbersButton id=\"two\" value=\"2\" />\n      <NumbersButton id=\"three\" value=\"3\" />\n      <OperatorsButton id=\"add\" value=\"+\" />\n      <NumbersButton id=\"four\" value=\"4\" />\n      <NumbersButton id=\"five\" value=\"5\" />\n      <NumbersButton id=\"six\" value=\"6\" />\n      <NegativeButton id=\"subtract\" value=\"-\" />\n      <NumbersButton id=\"seven\" value=\"7\" />\n      <NumbersButton id=\"eight\" value=\"8\" />\n      <NumbersButton id=\"nine\" value=\"9\" />\n      <OperatorsButton id=\"multiply\" value=\"*\" />\n      <ClearButton id=\"clear\" value=\"clear\" />\n      <NumbersButton id=\"zero\" value=\"0\" className=\"zero\" />\n      <NumbersButton id=\"decimal\" value=\".\" />\n      <OperatorsButton id=\"divide\" value=\"/\" />\n      \n      <EqualButton id=\"equals\" value=\"=\" />\n    </div>\n  );\n};\n\nexport default ButtonsContainer;\n","import './App.css';\nimport ButtonsContainer from \"./components/Buttons_container\"\nimport {useSelector} from \"react-redux\"\nfunction App() {\n  const inputValue = useSelector((state) => state.cal.input)\n  const outputValue = useSelector((state) => state.cal.output)\n  return (\n    <div className=\"App\">\n     <h1>javascript calculator</h1>\n    \n     <ButtonsContainer/> <br/>\n     <div className=\"IO\">\n     <span className=\"output\">{outputValue}</span> <br/><br/>\n     <span id=\"display\">{inputValue}</span>\n     </div>\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore} from \"@reduxjs/toolkit\"\nimport calReducer from \"./calculator-slice\"\nconst store = configureStore({\n    reducer: {\n        cal: calReducer\n    }\n})\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  input: 0,\n  output: 0,\n};\nconst numbersSlice = createSlice({\n  name: \"cal\",\n  initialState,\n  reducers: {\n    inputNumber: (state, action) => {\n      if (state.input === 0 && action.payload !== \".\") {\n        state.input = +action.payload;\n      } else if ((state.input + \"\").includes(\".\") && action.payload === \".\") {\n        // eslint-disable-next-line\n        state.input = state.input;\n      } else {\n        state.input += action.payload;\n      }\n    },\n    negativeOperator: (state, action) => {\n      if (state.input === 0) {\n        state.input = action.payload;\n      }\n      else {\n        state.input += action.payload;\n        if (state.output === 0) {\n          state.output = state.input;\n        } else {\n          state.output += state.input;\n        }\n  \n        state.input = 0;\n      }\n    },\n    clearInput: (state) => {\n      state.input = 0;\n      state.output = 0;\n    },\n    addOperator: (state, action) => {\n      state.input += action.payload;\n      if (state.output === 0) {\n        state.output = state.input;\n      } else {\n        state.output += state.input;\n      }\n\n      state.input = 0;\n    },\n    compute: (state) => {\n      state.output += state.input;\n      // eslint-disable-next-line\n      state.output = eval(state.output);\n      state.input = state.output;\n      state.output = 0;\n    },\n  },\n});\n\nexport const { inputNumber, clearInput, addOperator, compute, negativeOperator } =\n  numbersSlice.actions;\nexport default numbersSlice.reducer;\n"],"sourceRoot":""}